Reconstructing the spatial proteomics of villus
-------------

To present the pipeline of Flow2Spatial more clearly, we show the villus spatial proteomics reconstruction as an instance. 

Here, we applied POTTLE to an adult rat large intestinal villus tissue using a 25 Âµm chip. A total of 2,451 proteins groups in ~100 channels (two angle) was successfully detected using LC-MS/MS, and needed to be reconstructed by Flow2Spatial. Spatial metabolomics in the middle slice was used as the reference omics.

Training data generation
````````````

We first used ``generator.omics()`` to transfer molecular distribution from spatial metabolomics as training data. 

.. code-block:: python

    import Flow2Spatial as f2s
    f2s.generator.omics(adata, mask)

The first input is the spatial distribution of moleculars from spatial metabolomics (in the format of anndata). And the second inputs a bool matrix, showing whether tissue slice is palced in certain pixel. In default, output file will locate in the directory "./save_environ". 

We then applied Leiden/Louvain to cluster these spatial pixels at different resolution, and saved these results in a list named ``segments``. Thus, we can use ``generator.histology()`` to transfer histological information.

.. code-block:: python

    f2s.generator.histology(line_row, line_col, mask, segments, channel_intensity) 

The first two inputs are the parameters of the line equation in the parallel-flow projection of the first and last slice, which is placed by microfluidics chip. The third inputs a bool matrix, showing whether tissue slice is palced in certain pixel. After that, a list of clustering results ``segments`` and MS intensity in each channel are needed for the function. 

Finally, we used ``generator.random()`` to imporve the diversity of spatial distribution in the training set.

.. code-block:: python

    f2s.generator.random()

We can set parameter ``times`` to control the number of samples generated by ``generator.random()``. Default is 20,000.

Reconstruction model
````````````

We first used ``f2s.model.preparation()`` to prepare the generated data into the format needed for the DNN model with default parameters.

.. code-block:: python 

    f2s.model.preparation()

We then applied ``f2s.model.training()`` to train the reconstruction model.

.. code-block:: python 

    f2s.model.training(DNN_para=[12, 10, 8])

Noted, the default model parameter is ``DNN_para=[12, 10, 8]`` , which will output a matrix with dimension 70x70. You can change it to meet custom needs. The loss of taining and testing will locate at ``save_environ/loss.csv`` by default. Based on the loss, you can choose a better model (suitable epoch) for later reconstruction.

With the epoch we selects, we can use ``f2s.model.reconstruction()`` to reconstruct spatial proteomics with the real MS values.

.. code-block:: python 

    f2s.model.reconstruction(select_epoch, channel_intensity, out_adata='adata')

The first parameter is the epoch for best model we select. The second is MS intensity in each channel. And the last one is the name of the output file of reconstructed spatial proteomics, which will be in the format of h5ad. It locates at ``save_environ/adata.h5ad`` by default. If you change the DNN_para in ``f2s.model.training()`` , you will also need to pass it in ``f2s.model.reconstruction()`` . 

You are welcome to use h5ad readers, such as ``sc.read_h5ad('save_environ/adata.h5ad')`` in scanpy, for further spatial proteomics analysis.
